useEffect(() => {
  if (search.length > 2) {
    const getData = setTimeout(() => {
      dispatch(getLovData("name_of_employer", search))
        .then((res: any) => {
          let options = res.data;

          // Ensure "Others" is added only once
          const hasOthers = options.some(
            (option: LovInputValModel) => option.CODE_VALUE === "9999"
          );

          if (search.toLowerCase() === "others" && !hasOthers) {
            const otherOption = {
              CODE_DESC: "Others",
              CODE_VALUE: "9999",
              checked: false,
            };
            options = [...options, otherOption];
          }

          if (!(options.length > 0)) {
            setShowOption(false);
          } else {
            setShowOption(true);
            setSelectedOption(options);
          }
        })
        .catch((error: AxiosError) => {
          defaultError();
          return Promise.reject(error);
        });
    }, 500);
    return () => clearTimeout(getData);
  }
}, [search, dispatch]);



const addUserInput = (data: any) => {
  if (data.CODE_VALUE === "9999") {
    const stageComponents = dispatch(
      getFields(stageSelector, null, "name_of_employer_other")
    );
    setField(stageComponents);

    const otherVal = {
      CODE_DESC: "Others",
      CODE_VALUE: "9999",
    };
    setSelectedValue([otherVal]);
  } else {
    setSelectedValue([data]);
  }

  hide(false);
  setShowOption(false);

  // Trigger update action if "Others" is selected
  const valueChange =
    data.CODE_VALUE === "9999" ||
    selectedOption.some(
      (item) => item.CODE_VALUE === data.CODE_VALUE && data.checked === false
    );

  if (valueChange) {
    dispatch(
      ValueUpdateAction.getChangeUpdate({
        id: stageSelector[0].stageId,
        changes: true,
      })
    );
  }
};
