import axios from "axios";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import { getOfferCalulated } from "./preApprovalServices";

jest.mock("axios");

const mockStore = configureStore([thunk]);

describe("getOfferCalulated", () => {
  let store: ReturnType<typeof mockStore>;

  beforeEach(() => {
    // Mock Redux store with correct structure
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: "ACD-1",
            stageInfo: {
              application: {
                channel_reference: "mock-channel-ref",
              },
            },
          },
        ],
      },
    });

    // Mock process.env variables
    process.env.REACT_APP_RTOB_BASE_URL = "http://mock-base-url.com";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application";
    process.env.REACT_APP_RTOB_FETCH_APR_DETAILS = "/fetch-apr-details";
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("should make a POST request with the correct payload", async () => {
    const data = { requested_amount: 5000, requested_tenure: 12 };

    // Mock Axios POST
    (axios.post as jest.Mock).mockImplementation(() =>
      Promise.resolve({ data: "success" })
    );

    const response = await getOfferCalulated(data);

    // Verify Axios was called with the correct URL and payload
    expect(axios.post).toHaveBeenCalledWith(
      "http://mock-base-url.com/application/mock-channel-ref/fetch-apr-details",
      JSON.stringify({
        channel_ref_number: "mock-channel-ref",
        cos_ref_number: undefined,
        application_reference: undefined,
        source_system_name: "02",
        requested_amount: 5000,
        requested_tenure: 12,
      }),
      {
        headers: {
          "Content-Type": "application/json;charset=UTF-8",
          "Sc-Client-Context": undefined, // Mock or provide actual value
        },
      }
    );

    expect(response).toEqual({ data: "success" });
    expect(axios.post).toHaveBeenCalledTimes(1);
  });
});
