export const getProductMetaDataInfo = (urlParams: any): any => {
  var scClientContextHeaders = {
    "SC-CLIENT-CONTEXT":
      '{"reqId":"' +
      PreApprovalUtil.generateUUID() +
      '","Channel":"MOBILE","Country":"SG",' +
      '"Language":"EN","AppName":"RCWB","ClientId":"MOBILE","InstanceCode":"CB_IN",' +
      '"RumDevice":"devicebrowserversion","Source":"sc.com","DeviceType":"Desktop"}',
  };
  const endpoint = `${process.env.REACT_APP_PRODUCT_INFO_URL}`;
  const options = {
    method: "GET",
    url: endpoint,
    headers: {
      Authorization: `${process.env.REACT_APP_RTOB_AUTHORIZATION}`,
      "SC-CLIENT-CONTEXT": scClientContextHeaders["SC-CLIENT-CONTEXT"],
    },
  };
 
  return async (dispatch: AppDispatch) => axios
    .request(options)
    .then((response) => {
      let productInfoResponse = response.data.products;
      let products = getUrl.getParameterByName("products") ? getUrl.getParameterByName("products") : getUrl.getParameterByName("product");
      let resume = getUrl.getParameterByName("auth");
      if (!resume) {
        if (products) {
          let filteredProducts = [];
          let productlov: any = [];
          let proKey: any = [];
          if (products) {
            proKey = Object.keys(productInfoResponse);
            for (const elements of proKey) {
              productlov = productInfoResponse[elements];
              for (const elementj of productlov) {
                if (elementj.product_type === products) {
                  filteredProducts.push(elementj);
                }
              }
            }
            const flatFilteredArray = filteredProducts.flat();
            if (flatFilteredArray && flatFilteredArray.length > 0) {
              dispatch(urlParamAction.productDetails(flatFilteredArray));
              const decodedUrl = decodeURIComponent(urlParams.search.replace('?', ''));
              const splitUrlParams = decodedUrl.split("&");
              var product_type;
              var campaign;
              var premium;
              for (let i in splitUrlParams) {
                if (splitUrlParams[i].split("=")[0] === 'products' || splitUrlParams[i].split("=")[0] === 'product') {
                  product_type = splitUrlParams[i].split("=")[1]
                }
                if (splitUrlParams[i].split("=")[0] === 'campaign') {
                  campaign = splitUrlParams[i].split("=")[1]
                }
                if (splitUrlParams[i].split("=")[0] === 'premium') {
                  premium = splitUrlParams[i].split("=")[1]
                }
              }
              let product = JSON.parse(JSON.stringify(flatFilteredArray));
              product[0]["campaign"] = campaign;
              product[0]["name"] = "personal-instalment-loan";
              product[0]["company_category"] = "NA";
              product[0]["premiumCode"] = premium;
              product[0]["product_type"] = product_type;
              delete product[0].product_description
              return Promise.resolve(product);
            } else {
              const error = {
                response: {
                  status: "error",
                  statusText: "no response",
                },
              };
              dispatch(dispatchError(error));
            }
          }
        } else {
          const error = {
            response: {
              status: "error",
              statusText: "no response",
            },
          };
          dispatch(dispatchError(error));
          return Promise.reject();
        }
      }
    })
    .catch((error) => {
      console.log("clientResponse", error);
      dispatchError(error);
      return Promise.reject(error);
    });
};
