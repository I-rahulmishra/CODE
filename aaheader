import React from "react";
import { shallow, ShallowWrapper } from "enzyme";
import { cleanup, render, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import { store } from "../../../utils/store/store";
import Header from "./header";
import { CONSTANTS } from "../../../utils/common/constants";
import { getUrl } from "../../../utils/common/change.utils";

jest.mock("axios", () => ({
  __esModule: true,
}));

jest.mock("../../../utils/common/header-titles", () => jest.fn());
jest.mock("react-pdf", () => ({
  pdfjs: {
    GlobalWorkerOptions: {
      workerSrc: "https://pt.sc.com/onboarding/platform/react/pdf.worker.min.js",
    },
    renderTextLayer: false,
  },
  Outline: null,
}));

afterEach(() => {
  cleanup();
  jest.resetAllMocks();
});
afterAll(() => {
  jest.clearAllMocks();
});

describe("Header Component Tests", () => {
  let wrapper: ShallowWrapper;

  beforeEach(() => {
    wrapper = shallow(
      <Provider store={store}>
        <Header />
      </Provider>
    );
  });

  test("Should render correctly", () => {
    render(
      <Provider store={store}>
        <Header />
      </Provider>
    );
    expect(wrapper.length).toEqual(1);
    expect(wrapper.find(Header)).toHaveLength(1);
  });

  test("Should render without crashing when there are no stages", () => {
    const emptyStore = {
      ...store.getState(),
      stages: { stages: [] },
    };
    render(
      <Provider store={{ ...store, getState: () => emptyStore }}>
        <Header />
      </Provider>
    );
    expect(document.querySelector(".header")).toBeNull();
    expect(document.querySelector(".pending__resume-header")).toBeNull();
  });

  test("Should render product details when stages are available", () => {
    const updatedStore = {
      ...store.getState(),
      stages: {
        stages: [{ stageId: "stage-1", stageInfo: { applicants: [{}] } }],
      },
    };
    render(
      <Provider store={{ ...store, getState: () => updatedStore }}>
        <Header />
      </Provider>
    );
    expect(document.querySelector(".header")).toBeInTheDocument();
    expect(document.querySelector(".step-info")).toHaveTextContent("Expected Header Title");
  });

  test("Should render resume header when pathname matches", () => {
    Object.defineProperty(window, "location", {
      value: {
        pathname: "/hk/pending-application",
      },
      writable: true,
    });

    const updatedStore = {
      ...store.getState(),
      stages: { stages: [] },
    };
    render(
      <Provider store={{ ...store, getState: () => updatedStore }}>
        <Header />
      </Provider>
    );

    expect(document.querySelector(".pending__resume-header")).toBeInTheDocument();
    expect(document.querySelector(".resume__header-name")).toHaveTextContent("Expected Resume Header Text");
    expect(document.querySelector(".resume__header-text")).toHaveTextContent("Expected Subheader Text");
  });

  test("Should render close button in resume header", () => {
    Object.defineProperty(window, "location", {
      value: {
        pathname: "/hk/pending-application",
      },
      writable: true,
    });

    const updatedStore = {
      ...store.getState(),
      stages: { stages: [] },
    };
    render(
      <Provider store={{ ...store, getState: () => updatedStore }}>
        <Header />
      </Provider>
    );

    expect(document.querySelector(".close")).toBeInTheDocument();
  });

  test("Should render correct header title based on language", () => {
    const mockGetLanguageInfo = jest.fn(() => CONSTANTS.LANG_EN);
    jest.spyOn(getUrl, "getLanguageInfo").mockImplementation(mockGetLanguageInfo);

    const updatedStore = {
      ...store.getState(),
      stages: {
        stages: [{ stageId: "stage-1", stageInfo: { applicants: [{}] } }],
      },
    };

    render(
      <Provider store={{ ...store, getState: () => updatedStore }}>
        <Header />
      </Provider>
    );

    expect(document.querySelector(".product-name")).toHaveTextContent(CONSTANTS.MASTER_HEADER);
  });

  test("Should handle empty stageInfo gracefully", () => {
    const updatedStore = {
      ...store.getState(),
      stages: {
        stages: [{ stageId: "stage-1", stageInfo: null }],
      },
    };

    render(
      <Provider store={{ ...store, getState: () => updatedStore }}>
        <Header />
      </Provider>
    );

    expect(document.querySelector(".header")).not.toBeInTheDocument();
  });

  test("Should call title function with correct stageId and language", () => {
    const mockTitle = require("../../../utils/common/header-titles");
    mockTitle.mockReturnValue("Mock Title");

    const updatedStore = {
      ...store.getState(),
      stages: {
        stages: [{ stageId: "stage-1", stageInfo: { applicants: [{}] } }],
      },
    };

    render(
      <Provider store={{ ...store, getState: () => updatedStore }}>
        <Header />
      </Provider>
    );

    expect(mockTitle).toHaveBeenCalledWith("stage-1", CONSTANTS.LANG_EN);
    expect(document.querySelector(".step-info")).toHaveTextContent("Mock Title");
  });
});
