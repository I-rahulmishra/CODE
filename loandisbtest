import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import LoanDisbursement from './loan-disbursement';
import * as services from '../../services/preApprovalServices'; // Mocked services
import { getUrl } from '../../../../utils/common/change.utils';


jest.mock('../../../../utils/common/change.utils', () => ({
  // ...jest.requireActual('../../../utils/common/change.utils'),
  fieldError: jest.fn(),
  getUrl: {
    getLanguageInfo: jest.fn()
  },
  isFieldUpdate: jest.fn(),
  isFieldValueUpdate: jest.fn()
}));
const mockStore = configureStore([]);

jest.mock('../../services/preApprovalServices', () => ({
  getOffer2: jest.fn(),
  getOfferCalulated: jest.fn(),
  postPdfPreview: jest.fn(),
}));

jest.mock('axios', () => ({
  AxiosError: class AxiosErrorMock {
    message: string;
    constructor(message: string) {
      this.message = message;
    }
  },
}));

describe('LoanDisbursement Component', () => {
  let store: any;


  it('renders the component with default English content', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_category: 'PL',
                  offer_details: [
                    {
                      offer_status: '1004',
                      approved_amount: '50000',
                      approved_tenor: '12',
                      apr: '1.5',
                      flatRate: '0.5',
                      repaymentAmount: '4200',
                      approved_amount_currency: 'USD',
                      bestOffer: 'Y',
                    },
                    {
                      approved_amount_currency: "USD",
                      approved_tenor: 2,
                    }
                  ],
                },
              ],
            },
          },
        ],
      },
    });
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    expect(screen.getByText(/Congratulations!/i)).toBeInTheDocument();
    expect(screen.getByText(/Your preliminary assessment is completed/i)).toBeInTheDocument();
  });

  it('renders the component with Chinese content when language is zh-HK', () => {
       store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_category: 'PL',
                  offer_details: [
                    {
                      offer_status: '1004',
                      approved_amount: '50000',
                      approved_tenor: '12',
                      apr: '1.5',
                      flatRate: '0.5',
                      repaymentAmount: '4200',
                      approved_amount_currency: 'USD',
                      bestOffer: 'Y',
                    },
                    {
                      approved_amount_currency: "USD",
                      approved_tenor: 2,
                    }
                  ],
                },
              ],
            },
          },
        ],
      },
    });

    (getUrl.getLanguageInfo as jest.Mock).mockImplementation(()=>"zh-HK")
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    expect(screen.getByText(/恭喜/i)).toBeInTheDocument();
    expect(screen.getByText(/你的初步審批已經完成/i)).toBeInTheDocument();
  });

  it('handles loan amount change via slider', () => {

    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_category: 'PL',
                  offer_details: [
                    {
                      offer_status: '1003',
                      approved_amount: '50000',
                      approved_tenor: '12',
                      apr: '1.5',
                      flatRate: '0.5',
                      repaymentAmount: '4200',
                      approved_amount_currency: 'USD',
                      bestOffer: 'Y',
                    },
                    {
                      approved_amount_currency: "USD",
                      approved_tenor: 2,
                    }
                  ],
                },
              ],
            },
          },
        ],
      },
    });
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: '55000' } });

    expect(slider).toHaveValue('100');
  });

  it('calls calculateOffer on debounce', async () => {
    jest.spyOn(services, 'getOfferCalulated').mockResolvedValue({
      data: {
        apr: '1.8',
        monthly_flat_rate: '0.6',
        repayment_amount: '4500',
        response_action: 'CONTINUE',
      },
    });

    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );

    const input = screen.getByRole('slider');
    fireEvent.change(input, { target: { value: '60000' } });

    await waitFor(() => {
      expect(services.getOfferCalulated).toHaveBeenCalledWith({
        requested_amount: '',
        requested_tenure: '60',
      });
    });
  });

  it('renders spinner while loading', () => {

    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_category: 'PL',
                  offer_details: [
                    {
                      offer_status: '1003',
                      approved_amount: '50000',
                      approved_tenor: '12',
                      apr: '1.5',
                      flatRate: '0.5',
                      repaymentAmount: '4200',
                      approved_amount_currency: 'USD',
                      bestOffer: 'Y',
                    },
                    {
                      approved_amount_currency: "USD",
                      approved_tenor: 2,
                    }
                  ],
                },
              ],
            },
          },
        ],
      },
    });
    render(
      <Provider store={store}>
        <LoanDisbursement />
      </Provider>
    );
    const spinner = screen.queryByTestId('spinner__container');
    expect(spinner).toBeInTheDocument();
  });

  describe("test based on database", ()=>{
    beforeEach(() => {
      jest.clearAllMocks();
      store = mockStore({
        stages: {
          stages: [
            {
              stageInfo: {
                products: [
                  {
                    product_category: 'PL',
                    offer_details: [
                      {
                        offer_status: '1004',
                        approved_amount: '50000',
                        approved_tenor: '12',
                        apr: '1.5',
                        flatRate: '0.5',
                        repaymentAmount: '4200',
                        approved_amount_currency: 'USD',
                        bestOffer: 'Y',
                      },
                      {
                        approved_amount_currency: "USD",
                        approved_tenor: 2,
                      }
                    ],
                  },
                ],
              },
            },
          ],
        },
      });
    });
    it('renders remarks section correctly', () => {
      render(
        <Provider store={store}>
          <LoanDisbursement />
        </Provider>
      );
    
      // Check if the remarks section is rendered
      expect(
        screen.getByText(/Prepayment \/ Early Settlement \/ Redemption Fee:/i)
      ).toBeInTheDocument();
    });
  
    it('renders remarks section correctly', () => {
      render(
        <Provider store={store}>
          <LoanDisbursement />
        </Provider>
      );
    
      // Check if the remarks section is rendered
      expect(
        screen.getByText(/Congratulations!/i)
      ).toBeInTheDocument();
    });
    it('renders remarks section correctly', () => {
      render(
        <Provider store={store}>
          <LoanDisbursement />
        </Provider>
      );
    
      // Check if the remarks section is rendered
      expect(
        screen.getByText(/Your preliminary assessment is completed. Please confirm the loan offer to continue the application processing:/i)
      ).toBeInTheDocument();
    });
  
    it('renders remarks section Remarks: correctly', () => {
      render(
        <Provider store={store}>
          <LoanDisbursement />
        </Provider>
      );
    
      // Check if the remarks section is rendered
      expect(
        screen.getByText(/Remarks:/i)
      ).toBeInTheDocument();
    });
   
     it('renders remarks preliminary result section correctly', () => {
      render(
        <Provider store={store}>
          <LoanDisbursement />
        </Provider>
      );
    
      // Check if the remarks section is rendered
      expect(
        screen.getByText(/The above offers are preliminary result. The final result may vary after further assessment./i)
      ).toBeInTheDocument();
    });
  })
  

});




it('calls nextStage and proceeds to the next step', () => {
  const mockNextStage = jest.fn();
  render(
    <Provider store={store}>
      <LoanDisbursement nextStage={mockNextStage} />
    </Provider>
  );

  const nextButton = screen.getByRole('button', { name: /Next/i });
  fireEvent.click(nextButton);

  expect(mockNextStage).toHaveBeenCalled();
});


it('handles change in slider value correctly', () => {
  render(
    <Provider store={store}>
      <LoanDisbursement />
    </Provider>
  );

  const slider = screen.getByRole('slider');
  fireEvent.change(slider, { target: { value: '60000' } });

  expect(slider).toHaveValue('60000'); // Ensure the value is updated
});


it('calls calculateOffer and updates the UI on success', async () => {
  jest.spyOn(services, 'getOfferCalulated').mockResolvedValue({
    data: {
      apr: '1.8',
      monthly_flat_rate: '0.6',
      repayment_amount: '4500',
      response_action: 'CONTINUE',
    },
  });

  render(
    <Provider store={store}>
      <LoanDisbursement />
    </Provider>
  );

  const slider = screen.getByRole('slider');
  fireEvent.change(slider, { target: { value: '60000' } });

  await waitFor(() => {
    expect(services.getOfferCalulated).toHaveBeenCalledWith({
      requested_amount: '60000',
      requested_tenure: expect.any(String), // Or the expected value
    });
  });

  // Check for updated UI based on the mock response
  expect(screen.getByText(/1.8/i)).toBeInTheDocument(); // APR displayed
  expect(screen.getByText(/4500/i)).toBeInTheDocument(); // Repayment amount displayed
});


it('handles error in calculateOffer gracefully', async () => {
  jest.spyOn(services, 'getOfferCalulated').mockRejectedValue(new Error('API Error'));

  render(
    <Provider store={store}>
      <LoanDisbursement />
    </Provider>
  );

  const slider = screen.getByRole('slider');
  fireEvent.change(slider, { target: { value: '60000' } });

  await waitFor(() => {
    expect(services.getOfferCalulated).toHaveBeenCalled();
  });

  // Check for error handling, e.g., displaying an error message
  expect(screen.getByText(/Unable to calculate offer/i)).toBeInTheDocument();
});
