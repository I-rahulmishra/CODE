import { getUrl, getDeviceType } from "../common/change.utils";
import { KeyWithAnyModel } from "../model/common-model";

/**
 * Method to get device type
 */
export const getDeviceTypes = () => {
    let device = "Desktop Website";
    let userAgent = window.navigator.userAgent.toLowerCase();
    if (
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        userAgent
      )
    ) {
      return (device = "Mobile Website");
    }
    return device;
  };

export const getErrorType = (errorType: string) => {
    let errorTypeList: KeyWithAnyModel = {
        '': 'na',
        'STOP': 'Save and Next',
        'CONTINUE': 'Try Again',
        'RESUBMIT': 'Review',
        'CORRECT': 'Review',
        'LOGIN': 'Continue to Login',
        'ROSHAN_CONTINUE': 'Ok, Continue'
    }
    return errorTypeList[errorType];
 }

export const getUserType = (userType: string) => {
    let userTypeLIst: KeyWithAnyModel = {
        'ntb': 'New to Bank',
        'etb': 'Existing to Bank',
        'etc': 'Existing to cards or casa',
        'ntc': 'New to cards or casa',
        'ecc': 'Existing to credit cards applying for bundle',
        'c01': 'Non resident of SG',
        'eca': 'Existing to casa applying for bundle',
        'mdd': 'Multiple dedupe',
        'NTB': 'New to Bank',
        'ETB': 'Existing to Bank',
        'ETC': 'Existing to CC and PL',
        'ETP': 'Existing to CC and PL',
        'NTC': 'New to cards or casa'
    }
    return userTypeLIst[userType];
}



// export const getStepNames = (stage: KeyWithAnyModel) => {
//     const productsSelector =  stage.stages.stages[0].stageInfo.products;
//     const steps: KeyWithAnyModel = checkProductDetails(productsSelector) ? CONSTANTS.NTB : CONSTANTS.NTB;
//     console.log("steps[stage.stages.stages[0].stageId]", steps[stage.stages.stages[0].stageId])
//     if (steps[stage.stages.stages[0].stageId]) {
//         return steps[stage.stages.stages[0].stageId].name;
//     } else if (stage.stages.stages[0].stageId === 'ffd-1') {
//         return 'thank you'
//     } else {
//         return 'na';
//     }
// }


export const getStepName = (stage: KeyWithAnyModel) => {
    const stageID = stage.stages.currentStage ?  stage.stages.currentStage.toLowerCase() : stage.stages.stages[0].stageId.toLowerCase();
    let stepName;
    switch(stageID) {
        case 'declare':
            stepName = "start application process";
            break;
        case 'pd-1':
            stepName = "personal details";
            break;
        case 'bd-1a':
            stepName = "loan details";
            break;
        case 'bd-1':
            stepName = "loan details";
            break;
        case 'ssf-1':
            stepName = "let's get started !";
            break;
        case 'bd-2':
            stepName = "partner bank details";
            break;
        case 'bd-3':
            stepName = "eligibility assessment";
            break;
        case 'bd-4':
            stepName = "personal details";
            break;
        case 'bd-5':
            stepName = "continue personal details";
            break;
        case 'ad-1':
            stepName = "tax information";
            break;
        case 'ad-3':
            stepName = "create your online banking login details";
            break;
        case 'ad-2':
            stepName = "preferences for account";
            break;
        case 'rp':
            stepName = "review and confirm";
            break;
    }
    return stepName;
}


export const loginval = () => {
    // const isIbanking = getUrl.getParameterByName("auth");
    // if (isIbanking != null && getDeviceType() !== 'Mobile Website') {
    //     return 'Ibanking';
    // }
    // else if (isIbanking != null && getDeviceType() === 'Mobile Website') {
    //     return 'SC Mobile';
    // }
    // else {
        return 'RTOB';
    // }
}





import {
  getDeviceTypes,
  getErrorType,
  getUserType,
  getStepName,
  loginval,
} from "../common/change.utils";

describe("Utility Functions", () => {
  beforeAll(() => {
    // Mock navigator object for getDeviceTypes
    Object.defineProperty(window.navigator, "userAgent", {
      writable: true,
      value: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    });
  });

  describe("getDeviceTypes", () => {
    it("should return 'Desktop Website' for desktop user agent", () => {
      expect(getDeviceTypes()).toBe("Desktop Website");
    });

    it("should return 'Mobile Website' for mobile user agent", () => {
      window.navigator.userAgent =
        "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E5239e Safari/602.1";
      expect(getDeviceTypes()).toBe("Mobile Website");
    });
  });

  describe("getErrorType", () => {
    it("should return corresponding error type for valid keys", () => {
      expect(getErrorType("STOP")).toBe("Save and Next");
      expect(getErrorType("CONTINUE")).toBe("Try Again");
    });

    it("should return 'na' for empty or invalid error type", () => {
      expect(getErrorType("")).toBe("na");
      expect(getErrorType("INVALID")).toBeUndefined();
    });
  });

  describe("getUserType", () => {
    it("should return corresponding user type for valid keys", () => {
      expect(getUserType("ntb")).toBe("New to Bank");
      expect(getUserType("ETB")).toBe("Existing to Bank");
    });

    it("should return undefined for invalid user type", () => {
      expect(getUserType("INVALID")).toBeUndefined();
    });
  });

  describe("getStepName", () => {
    it("should return the correct step name based on stage ID", () => {
      const mockStage = {
        stages: {
          currentStage: "declare",
          stages: [{ stageId: "declare" }],
        },
      };
      expect(getStepName(mockStage)).toBe("start application process");

      mockStage.stages.currentStage = "bd-1";
      expect(getStepName(mockStage)).toBe("loan details");
    });

    it("should return undefined for unhandled stage IDs", () => {
      const mockStage = {
        stages: {
          currentStage: "unknown",
          stages: [{ stageId: "unknown" }],
        },
      };
      expect(getStepName(mockStage)).toBeUndefined();
    });
  });

  describe("loginval", () => {
    it("should return 'RTOB' regardless of conditions", () => {
      expect(loginval()).toBe("RTOB");
    });
  });
});
