yimport { nextStage } from './LoanDisbursement';
import { stagesAction } from '../../../../utils/store/stages-slice';
import { dispatchLoader, dispatchError } from '../../../../services/common-service';
import { getOffer2 } from '../../services/preApprovalServices';

jest.mock('../../services/preApprovalServices', () => ({
  getOffer2: jest.fn(),
}));
jest.mock('../../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
  dispatchError: jest.fn(),
}));
jest.mock('../../../../utils/store/stages-slice', () => ({
  stagesAction: {
    updateStageId: jest.fn(),
  },
}));

describe('nextStage', () => {
  it('should dispatch loader and handle stage updates correctly', async () => {
    const dispatch = jest.fn();
    const stageSelector = {
      applicants: {
        requested_loan_amount_a_1: '10000',
        requested_loan_tenor_a_1: '60',
      },
    };
    const defaultValue = '15000';
    const defaultMonth = '48';

    getOffer2.mockResolvedValue({
      status: 200,
      data: {
        application: { response_type: 'INFO', response_action: 'SUCCESS' },
        products: [
          {
            offer_details: [
              { offer_status: '1001', service_type: 'ACD3' },
            ],
          },
        ],
      },
    });

    await nextStage.call({ dispatch, defaultValue, defaultMonth, stageSelector });

    expect(dispatchLoader).toHaveBeenCalledWith(true);
    expect(stagesAction.updateStageId).toHaveBeenCalledWith('ACD_3');
    expect(dispatch).toHaveBeenCalled();
  });

  it('should handle API errors gracefully', async () => {
    const dispatch = jest.fn();
    getOffer2.mockRejectedValue(new Error('API Error'));

    await nextStage.call({ dispatch });

    expect(dispatchError).toHaveBeenCalled();
  });
});







import { getOfferCalulated } from './LoanDisbursement';
import { dispatchError } from '../../../../services/common-service';

jest.mock('../../../../services/common-service', () => ({
  dispatchError: jest.fn(),
}));

describe('getOfferCalulated', () => {
  it('should update APR and repayment values on success', async () => {
    const setAprValue = jest.fn();
    const setFlateRateValue = jest.fn();
    const setRepaymentAmount = jest.fn();
    const data = { requested_tenure: '48', requested_amount: '15000' };

    const mockResponse = {
      status: 200,
      data: {
        apr: '3.5',
        monthly_flat_rate: '0.2',
        repayment_amount: '500',
      },
    };

    global.getOfferCalulated = jest.fn().mockResolvedValue(mockResponse);

    await getOfferCalulated.call({ setAprValue, setFlateRateValue, setRepaymentAmount }, data);

    expect(setAprValue).toHaveBeenCalledWith('3.5');
    expect(setFlateRateValue).toHaveBeenCalledWith('0.2');
    expect(setRepaymentAmount).toHaveBeenCalledWith('500');
  });

  it('should handle API errors gracefully', async () => {
    const data = { requested_tenure: '48', requested_amount: '15000' };

    global.getOfferCalulated = jest.fn().mockRejectedValue(new Error('API Error'));

    await getOfferCalulated.call({}, data);

    expect(dispatchError).toHaveBeenCalled();
  });
});







The error in the screenshot indicates that mockResolvedValue is being called on an object (getOffer2) that doesn’t have the appropriate Jest mocking setup.

Here’s how you can fix it:
	1.	Ensure Proper Mocking of getOffer2:
The function getOffer2 needs to be mocked correctly. Make sure you’re importing it properly and mocking it with Jest. If getOffer2 is not automatically mocked, you need to create a manual mock.

jest.mock('../../services/preApprovalServices', () => ({
  getOffer2: jest.fn(),
}));


	2.	Update the Test:
Once getOffer2 is properly mocked, you can use mockResolvedValue on it. For example:

getOffer2.mockResolvedValue({
  status: 200,
  data: {
    application: { response_type: 'INFO', response_action: 'SUCCESS' },
    products: [
      {
        offer_details: [
          { offer_status: '1001', service_type: 'ACD3' },
        ],
      },
    ],
  },
});


	3.	TypeScript Considerations:
If you’re using TypeScript and it complains about mockResolvedValue, you may need to explicitly cast the mock. Here’s an example:

(getOffer2 as jest.Mock).mockResolvedValue({
  status: 200,
  data: {
    application: { response_type: 'INFO', response_action: 'SUCCESS' },
    products: [
      {
        offer_details: [
          { offer_status: '1001', service_type: 'ACD3' },
        ],
      },
    ],
  },
});


	4.	Verify Your Imports:
Ensure that getOffer2 is being imported from the correct file and that the module path matches where getOffer2 is defined.

Let me know if you need additional guidance!







The issue highlighted in the second image is a TypeScript error indicating that global.getOfferCalulated is being used, but globalThis doesn’t have an index signature for the property getOfferCalulated.

Here’s how you can address this problem:

1. Properly Mock getOfferCalulated

It seems getOfferCalulated is not defined as a property of global. To avoid TypeScript complaints, explicitly extend the type definition for global in your test setup.

Update or Create a global.d.ts File

Create or modify a global.d.ts file in your project (e.g., in the src or types folder) to extend the type for globalThis:

declare global {
  var getOfferCalulated: jest.Mock<any, any>;
}

Add this line to your test:

global.getOfferCalulated = jest.fn();

2. Cast global.getOfferCalulated as jest.Mock

In your test, TypeScript needs to recognize that global.getOfferCalulated is a Jest mock. You can cast it explicitly as follows:

(global.getOfferCalulated as jest.Mock).mockResolvedValue(mockResponse);

3. Example Test Code Update

Here’s how your updated test code should look:

import { getOfferCalulated } from './LoanDisbursement';

describe('getOfferCalulated', () => {
  beforeAll(() => {
    global.getOfferCalulated = jest.fn(); // Mock the global function
  });

  it('should update APR and repayment values on success', async () => {
    const setAprValue = jest.fn();
    const setFlateRateValue = jest.fn();
    const setRepaymentAmount = jest.fn();
    const data = { requested_tenure: '48', requested_amount: '15000' };

    const mockResponse = {
      status: 200,
      data: {
        apr: '3.5',
        monthly_flat_rate: '0.2',
        repayment_amount: '500',
      },
    };

    (global.getOfferCalulated as jest.Mock).mockResolvedValue(mockResponse);

    await getOfferCalulated.call({ setAprValue, setFlateRateValue, setRepaymentAmount }, data);

    expect(setAprValue).toHaveBeenCalledWith('3.5');
    expect(setFlateRateValue).toHaveBeenCalledWith('0.2');
    expect(setRepaymentAmount).toHaveBeenCalledWith('500');
  });

  it('should handle API errors gracefully', async () => {
    const data = { requested_tenure: '48', requested_amount: '15000' };

    (global.getOfferCalulated as jest.Mock).mockRejectedValue(new Error('API Error'));

    await getOfferCalulated.call({}, data);

    expect(dispatchError).toHaveBeenCalled();
  });
});

4. Ensure Correct Mocking Setup

Check that getOfferCalulated is correctly mocked in your test environment. If it’s a global function, mocking it as above is sufficient. If it’s part of a module, use:

jest.mock('../../path/to/module', () => ({
  getOfferCalulated: jest.fn(),
}));

Let me know if you encounter further issues!






import React from 'react';
import { render } from '@testing-library/react';
import { useDispatch } from 'react-redux';
import { nextStage } from './loan-disbursement'; // Import your function/component
import { getOffer2 } from './api'; // Import the mocked API function

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
}));

jest.mock('./api', () => ({
  getOffer2: jest.fn(),
}));

describe('nextStage', () => {
  it('should dispatch loader and handle stage updates correctly', async () => {
    const dispatch = jest.fn(); // Mock dispatch function
    (useDispatch as jest.Mock).mockReturnValue(dispatch); // Mock useDispatch to return the mock dispatch

    (getOffer2 as jest.Mock).mockResolvedValue({
      status: 200,
      data: {
        application: { response_type: 'INFO', response_action: 'SUCCESS' },
        products: [
          {
            offer_details: [
              { offer_status: '1001', service_type: 'ACD3' },
            ],
          },
        ],
      },
    });

    const stageSelector = {
      applicants: {
        requested_loan_amount_a_1: '10000',
        requested_loan_tenor_a_1: '60',
      },
    };

    const defaultValue = '15000';
    const defaultMonth = '48';

    await nextStage({
      dispatch,
      defaultValue,
      defaultMonth,
      stageSelector,
    });

    // Assertions
    expect(dispatch).toHaveBeenCalledWith({ type: 'loader/show' }); // Example loader action
    expect(dispatch).toHaveBeenCalled(); // Ensure dispatch is called
  });

  it('should handle API errors gracefully', async () => {
    const dispatch = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(dispatch);

    (getOffer2 as jest.Mock).mockRejectedValue(new Error('API Error'));

    const stageSelector = {
      applicants: {
        requested_loan_amount_a_1: '10000',
        requested_loan_tenor_a_1: '60',
      },
    };

    const defaultValue = '15000';
    const defaultMonth = '48';

    await expect(
      nextStage({
        dispatch,
        defaultValue,
        defaultMonth,
        stageSelector,
      })
    ).rejects.toThrow('API Error');

    expect(dispatch).toHaveBeenCalledWith({ type: 'loader/show' }); // Example loader action
    expect(dispatch).toHaveBeenCalledWith({ type: 'loader/hide' });
  });
});
