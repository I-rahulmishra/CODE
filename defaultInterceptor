yimport { nextStage } from './LoanDisbursement';
import { stagesAction } from '../../../../utils/store/stages-slice';
import { dispatchLoader, dispatchError } from '../../../../services/common-service';
import { getOffer2 } from '../../services/preApprovalServices';

jest.mock('../../services/preApprovalServices', () => ({
  getOffer2: jest.fn(),
}));
jest.mock('../../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
  dispatchError: jest.fn(),
}));
jest.mock('../../../../utils/store/stages-slice', () => ({
  stagesAction: {
    updateStageId: jest.fn(),
  },
}));

describe('nextStage', () => {
  it('should dispatch loader and handle stage updates correctly', async () => {
    const dispatch = jest.fn();
    const stageSelector = {
      applicants: {
        requested_loan_amount_a_1: '10000',
        requested_loan_tenor_a_1: '60',
      },
    };
    const defaultValue = '15000';
    const defaultMonth = '48';

    getOffer2.mockResolvedValue({
      status: 200,
      data: {
        application: { response_type: 'INFO', response_action: 'SUCCESS' },
        products: [
          {
            offer_details: [
              { offer_status: '1001', service_type: 'ACD3' },
            ],
          },
        ],
      },
    });

    await nextStage.call({ dispatch, defaultValue, defaultMonth, stageSelector });

    expect(dispatchLoader).toHaveBeenCalledWith(true);
    expect(stagesAction.updateStageId).toHaveBeenCalledWith('ACD_3');
    expect(dispatch).toHaveBeenCalled();
  });

  it('should handle API errors gracefully', async () => {
    const dispatch = jest.fn();
    getOffer2.mockRejectedValue(new Error('API Error'));

    await nextStage.call({ dispatch });

    expect(dispatchError).toHaveBeenCalled();
  });
});







import { getOfferCalulated } from './LoanDisbursement';
import { dispatchError } from '../../../../services/common-service';

jest.mock('../../../../services/common-service', () => ({
  dispatchError: jest.fn(),
}));

describe('getOfferCalulated', () => {
  it('should update APR and repayment values on success', async () => {
    const setAprValue = jest.fn();
    const setFlateRateValue = jest.fn();
    const setRepaymentAmount = jest.fn();
    const data = { requested_tenure: '48', requested_amount: '15000' };

    const mockResponse = {
      status: 200,
      data: {
        apr: '3.5',
        monthly_flat_rate: '0.2',
        repayment_amount: '500',
      },
    };

    global.getOfferCalulated = jest.fn().mockResolvedValue(mockResponse);

    await getOfferCalulated.call({ setAprValue, setFlateRateValue, setRepaymentAmount }, data);

    expect(setAprValue).toHaveBeenCalledWith('3.5');
    expect(setFlateRateValue).toHaveBeenCalledWith('0.2');
    expect(setRepaymentAmount).toHaveBeenCalledWith('500');
  });

  it('should handle API errors gracefully', async () => {
    const data = { requested_tenure: '48', requested_amount: '15000' };

    global.getOfferCalulated = jest.fn().mockRejectedValue(new Error('API Error'));

    await getOfferCalulated.call({}, data);

    expect(dispatchError).toHaveBeenCalled();
  });
});
