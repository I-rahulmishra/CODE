yHere are additional test cases you can add to ensure the Number component is well-tested:


---

1. Test: Renders the Component with Default Props

This test checks if the component renders properly even when no props are passed.

it("renders correctly with default props", () => {
  render(
    <Provider store={store}>
      <Number />
    </Provider>
  );
  expect(screen.getByRole("textbox")).toBeInTheDocument();
});


---

2. Test: Handles Mandatory Fields Validation

This test ensures that the component validates mandatory fields correctly.

it("shows an error when a mandatory field is left empty", () => {
  render(
    <Provider store={store}>
      <Number {...mockProps} />
    </Provider>
  );

  const input = screen.getByPlaceholderText("eg. 8446 2196 1234 1234");
  fireEvent.change(input, { target: { value: "" } }); // Simulate clearing the input
  fireEvent.blur(input); // Simulate losing focus

  expect(mockProps.handleFieldDispatch).toHaveBeenCalledWith(
    expect.objectContaining({
      error: "This field is mandatory",
    })
  );
});


---

3. Test: Handles Regex Validation

This test ensures that invalid input values are not accepted.

it("validates input against the regex pattern", () => {
  render(
    <Provider store={store}>
      <Number {...mockProps} />
    </Provider>
  );

  const input = screen.getByPlaceholderText("eg. 8446 2196 1234 1234");
  fireEvent.change(input, { target: { value: "abc123" } }); // Invalid value
  fireEvent.blur(input);

  expect(mockProps.handleFieldDispatch).toHaveBeenCalledWith(
    expect.objectContaining({
      error: "Invalid input format",
    })
  );
});


---

4. Test: Handles Callback Execution

This test ensures that handleCallback is called with the correct arguments when the input value changes.

it("calls handleCallback when the value changes", () => {
  render(
    <Provider store={store}>
      <Number {...mockProps} />
    </Provider>
  );

  const input = screen.getByPlaceholderText("eg. 8446 2196 1234 1234");
  fireEvent.change(input, { target: { value: "67890" } });

  expect(mockProps.handleCallback).toHaveBeenCalledWith({
    logical_field_name: "account_number_type_1",
    value: "67890",
  });
});


---

5. Test: Displays Error from Redux Store

This test ensures that errors from the Redux store are displayed correctly.

beforeEach(() => {
  store = mockStore({
    stages: {
      stages: [],
      userInput: { applicants: [{ account_number_type_1: "12345" }] },
    },
    fielderror: { error: [{ field: "account_number_type_1", message: "Invalid account number" }] },
  });
});

it("displays an error from the store", () => {
  render(
    <Provider store={store}>
      <Number {...mockProps} />
    </Provider>
  );

  const errorMessage = screen.getByText("Invalid account number");
  expect(errorMessage).toBeInTheDocument();
});


---

6. Test: Renders Minimum Length Attribute

This test ensures that the min_length prop is correctly rendered in the input element.

it("renders the correct minimum length attribute", () => {
  render(
    <Provider store={store}>
      <Number {...mockProps} />
    </Provider>
  );

  const input = screen.getByPlaceholderText("eg. 8446 2196 1234 1234");
  expect(input).toHaveAttribute("minlength", "5");
});


---

7. Test: Simulates Blur Event

This test checks if the blur event triggers the required behavior.

it

