test('renders file size validation modal when file exceeds max size', async () => {
  const file = new File(["dummy content"], "large-image.png", { type: "image/png" });
  Object.defineProperty(file, 'size', { value: 6 * 1024 * 1024 }); // 6MB

  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const fileInput = screen.getByLabelText("Upload");
  fireEvent.change(fileInput, { target: { files: [file] } });

  expect(screen.getByText(/File format should be in JPG or PNG/)).toBeInTheDocument();
  expect(screen.getByText('invalideimagesize')).toBeInTheDocument();
});

test('uploads valid file and updates file list', async () => {
  const file = new File(["dummy content"], "valid-image.png", { type: "image/png" });

  (postDocuments as jest.Mock).mockResolvedValue({
    statusText: "Accepted",
    data: { docId: "456", filename: "valid-image.png", documentStatus: "UPLOADED" },
  });

  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const fileInput = screen.getByLabelText("Upload");
  fireEvent.change(fileInput, { target: { files: [file] } });

  await waitFor(() => {
    expect(store.dispatch).toHaveBeenCalledWith(expect.any(Function));
  });

  expect(screen.getByText("valid-image.png")).toBeInTheDocument();
  expect(screen.getByText("Upload completed")).toBeInTheDocument();
});

test('removes uploaded file when delete button is clicked', async () => {
  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  expect(screen.getByText("test-image.png")).toBeInTheDocument();

  const deleteButton = screen.getByTestId("delete-btn");
  fireEvent.click(deleteButton);

  await waitFor(() => {
    expect(screen.queryByText("test-image.png")).not.toBeInTheDocument();
  });
});

test('calls refresh function when upload fails', async () => {
  store = mockStore({
    ...store.getState(),
    stages: {
      ...store.getState().stages,
      stages: [{
        stageInfo: {
          applicant_documents: [{
            document_list: [{
              document_category: "Income Proof",
              document_options: [{
                document_types: [{
                  uploaded_documents: [{ docId: "123", filename: "failed-image.png", documentStatus: "Upload failed" }]
                }]
              }]
            }]
          }]
        }
      }]
    }
  });

  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  expect(screen.getByText("Upload failed Retry?")).toBeInTheDocument();

  const retryButton = screen.getByTestId("refresh-btn");
  fireEvent.click(retryButton);

  expect(store.dispatch).toHaveBeenCalled();
});

test('displays image preview modal when clicking on an uploaded image', async () => {
  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const uploadedImage = screen.getByTestId("image-preview-id");
  fireEvent.click(uploadedImage);

  expect(screen.getByText("test-image.png")).toBeInTheDocument();
});

test('closes success modal when clicking close button', async () => {
  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const successModal = screen.getByText("Success");
  fireEvent.click(successModal);

  expect(screen.queryByText("Success")).not.toBeInTheDocument();
});

test('disables continue button when no files are uploaded', async () => {
  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const continueButton = screen.getByRole("button", { name: /Continue/i });
  expect(continueButton).toBeDisabled();
});

test('enables continue button when files are uploaded', async () => {
  store = mockStore({
    ...store.getState(),
    stages: {
      ...store.getState().stages,
      stages: [{
        stageInfo: {
          applicant_documents: [{
            document_list: [{
              document_category: "Income Proof",
              document_options: [{
                document_types: [{
                  uploaded_documents: [{ docId: "789", filename: "new-image.png", documentStatus: "UPLOADED" }]
                }]
              }]
            }]
          }]
        }
      }]
    }
  });

  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const continueButton = screen.getByRole("button", { name: /Continue/i });
  expect(continueButton).not.toBeDisabled();
});

test('handles form submission and updates state', async () => {
  render(
    <Provider store={store}>
      <DocumentUpload {...mockProps} />
    </Provider>
  );

  const continueButton = screen.getByRole("button", { name: /Continue/i });
  fireEvent.click(continueButton);

  await waitFor(() => {
    expect(store.dispatch).toHaveBeenCalledWith(expect.any(Function));
  });
});
