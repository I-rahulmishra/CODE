yHere are two test cases for okBtnClick and handleUploadFile using Jest and React Testing Library.

Test Cases

1. okBtnClick should update stage data and dispatch actions

it("should update stage data and dispatch necessary actions on okBtnClick", async () => {
  const { getByRole } = render(
    <Provider store={store}>
      <DocumentUpload setShowIncomeProof={jest.fn()} setShowQRCodePage={jest.fn()} setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
    </Provider>
  );

  // Simulate file upload
  act(() => {
    store.dispatch(stagesAction.updateDocumentCount(1));
    store.dispatch(stagesAction.updatefileSectionData([]));
  });

  // Click Continue button
  const continueButton = getByRole("button", { name: "Income Proof" });
  fireEvent.click(continueButton);

  // Check if dispatch was called with correct actions
  expect(store.dispatch).toHaveBeenCalledWith(expect.any(Function)); 
  expect(store.dispatch).toHaveBeenCalledWith(stagesAction.updateDocumentCount(1));
  expect(store.dispatch).toHaveBeenCalledWith(stagesAction.updatefileSectionData([]));
});

2. handleUploadFile should upload a valid file and update state

it("should handle file upload and update state when valid file is uploaded", async () => {
  const file = new File(["dummy content"], "test-image.png", { type: "image/png" });
  const { getByLabelText } = render(
    <Provider store={store}>
      <DocumentUpload setShowIncomeProof={jest.fn()} setShowQRCodePage={jest.fn()} setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
    </Provider>
  );

  // Simulate file selection
  const fileInput = getByLabelText("Upload");
  fireEvent.change(fileInput, { target: { files: [file] } });

  // Expect dispatchLoader to be called
  expect(store.dispatch).toHaveBeenCalledWith(dispatchLoader(true));

  // Mock API response
  await act(async () => {
    await store.dispatch({
      type: "MOCK_UPLOAD_SUCCESS",
      payload: { statusText: "Accepted", data: { docId: "123" } },
    });
  });

  // Expect file to be added to state
  expect(store.dispatch).toHaveBeenCalledWith(expect.any(Function));
  expect(store.dispatch).toHaveBeenCalledWith(dispatchLoader(false));
});


---

Modified beforeEach Mock

beforeEach(() => {
  store = mockStore({
    stages: {
      stages: [{
        stageInfo: {
          applicant_documents: [{
            document_list: [{
              document_category: "Income Proof",
              document_options: [{
                document_types: [{
                  uploaded_documents: [{ docId: "123", filename: "test-image.png", documentStatus: "UPLOADED" }]
                }]
              }]
            }]
          }]
        }
      }],
      dynamicDocumentsUpload: {
        documentCount: 1,
        fileSectionData: {
          document_category: "Income Proof"
        }
      }
    },
    preApproval: {
      documentZoloCheckRes: {
        data: {
          documents: [{ documentName: "test-doc" }]
        }
      },
      imgPrevURL: "test-url"
    }
  });

  store.dispatch = jest.fn();
});

This ensures the mock store correctly represents a document already uploaded. Let me know if you need more!

