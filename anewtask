yFixing the act Error in React Testing Library

If you're encountering an error related to act in React Testing Library, it typically happens because state updates are occurring outside of act(), and the test is not waiting for asynchronous updates.

Possible fixes:

1. Wrap async updates in act

await act(async () => {
  fireEvent.click(screen.getByRole('button', { name: /continue/i }));
});


2. Use waitFor
If the state update is async, use waitFor:

await waitFor(() => {
  fireEvent.click(screen.getByRole('button', { name: /continue/i }));
});


3. Use userEvent instead of fireEvent
userEvent.click ensures proper event propagation, preventing act errors:

await userEvent.click(screen.getByRole('button', { name: /continue/i }));




---

Ways to Click okBtnClick in Tests

Here are different ways you can trigger okBtnClick inside your tests:

1. Using fireEvent.click

fireEvent.click(screen.getByRole('button', { name: /continue/i }));

2. Using userEvent.click (Preferred)

await userEvent.click(screen.getByRole('button', { name: /continue/i }));

3. Using querySelector

const button = container.querySelector('.continue');
button && fireEvent.click(button);

4. Using findByRole for async elements

const button = await screen.findByRole('button', { name: /continue/i });
fireEvent.click(button);

5. Directly calling the function

If needed, you can call the function directly:

okBtnClick({ target: { title: 'Income Proof' } });


---

Test Cases for okBtnClick and handleUploadFile

Test for okBtnClick

test('should dispatch actions and update state when okBtnClick is triggered', async () => {
  render(<DocumentUpload {...mockProps} />);

  const button = screen.getByRole('button', { name: /continue/i });

  await userEvent.click(button);

  expect(store.dispatch).toHaveBeenCalledWith(
    expect.objectContaining({
      type: 'stages/getStage',
    })
  );
});

Test for handleUploadFile

test('should call postDocuments and update files state when a file is uploaded', async () => {
  render(<DocumentUpload {...mockProps} />);

  const file = new File(['sample content'], 'test-file.jpg', { type: 'image/jpeg' });

  const input = screen.getByLabelText(/upload/i);
  await userEvent.upload(input, file);

  expect(store.dispatch).toHaveBeenCalledWith(expect.any(Function));
});

Would you like additional test cases or modifications?

