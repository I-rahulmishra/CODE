import { nextStage } from './path-to-file';
import * as services from './services';
import * as stagesAction from './stagesAction';
import { dispatchLoader } from './loaderActions';

jest.mock('./services');
jest.mock('./stagesAction');
jest.mock('./loaderActions');

const mockDispatch = jest.fn();

describe('nextStage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should dispatch loader and update stage when responseType is INFO and responseAction is SUCCESS', async () => {
    const payload = { applicants: { requested_loan_amount: '1000' } };
    const mockResponse = {
      status: 200,
      data: {
        application: { response_type: 'INFO', response_action: 'SUCCESS' },
        products: [{ offer_details: [{ offer_status: '1001', service_type: 'ACD3' }] }],
      },
    };

    (services.getOffer2 as jest.Mock).mockResolvedValue(mockResponse);

    await nextStage(mockDispatch);

    expect(dispatchLoader).toHaveBeenCalledWith(true);
    expect(stagesAction.updateStageId).toHaveBeenCalledWith('ACD3');
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('should handle empty offerDetails array', async () => {
    const mockResponse = {
      status: 200,
      data: {
        application: { response_type: 'INFO', response_action: 'SUCCESS' },
        products: [{ offer_details: [] }],
      },
    };

    (services.getOffer2 as jest.Mock).mockResolvedValue(mockResponse);

    await nextStage(mockDispatch);

    expect(dispatchLoader).toHaveBeenCalledWith(true);
    expect(stagesAction.updateStageId).not.toHaveBeenCalled();
  });

  it('should not update stage when responseAction is CONTINUE', async () => {
    const mockResponse = {
      status: 200,
      data: {
        application: { response_type: 'SOFT', response_action: 'CONTINUE' },
        products: [],
      },
    };

    (services.getOffer2 as jest.Mock).mockResolvedValue(mockResponse);

    await nextStage(mockDispatch);

    expect(dispatchLoader).toHaveBeenCalledWith(true);
    expect(stagesAction.updateStageId).not.toHaveBeenCalled();
  });

  it('should handle error thrown by getOffer2', async () => {
    (services.getOffer2 as jest.Mock).mockRejectedValue(new Error('API error'));

    await expect(nextStage(mockDispatch)).rejects.toThrow('API error');

    expect(dispatchLoader).toHaveBeenCalledWith(true);
    expect(stagesAction.updateStageId).not.toHaveBeenCalled();
  });
});
